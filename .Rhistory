addCircleMarkers(
label = ~church_id,
radius = 5,
color=~pal(prog_200),
stroke=FALSE,
fillOpacity = .5
)
# only keep active
uvao_jj = uvao_jj %>% filter(status!="non_preserve")
# plot geographic map with locations in UVAO
ggplot() +
geom_sf(data=uvao) +
geom_sf(data=uvao_jj, aes(color=prog_200), size=2) +
#scale_colour_manual(name = "Species Names", values = myColors)
scale_color_manual(labels = c('not in program', 'in program'), values = c("0" = "blue","1"="red")) +
labs(color='Program 200') + theme_bw()
# same in leaflet
pal <- colorFactor(c("navy", "red"), domain = c(0, 1))
leaflet(uvao_jj) %>%
addTiles() %>%
addCircleMarkers(
label = ~church_id,
radius = 5,
color=~pal(prog_200),
stroke=FALSE,
fillOpacity = .5
)
hist(uvao_jj$status)
ggplot(uvao_jj) + geom_bar(x=type_build)
ggplot(uvao_jj) + geom_bar(aes(x=type_build))
leaflet(uvao_jj) %>%
addTiles() %>%
addCircleMarkers(
label = ~church_id,
radius = 5,
color=~pal(prog_200),
stroke=FALSE,
fillOpacity = .5
)
View(uvao_jj)
setwd("D:/gits/church_cover/")
#setwd("D:/gits/church_cover/")
setwd("C:/Users/barguzin/Documents/Github/church_cover/")
#okrug = st_read('C:/Users/noibar/YandexDisk/mosmonitor/geo_data/RU-MOW/data/boundary-polygon.shp')
okrug = st_read('C:/Users/barguzin/YandexDisk/mosmonitor/geo_data/RU-MOW/data/boundary-polygon.shp')
library(sf)
library(tidyverse)
library(ggplot2)
library(lubridate)
library(RColorBrewer)
library(leaflet)
#okrug = st_read('C:/Users/noibar/YandexDisk/mosmonitor/geo_data/RU-MOW/data/boundary-polygon.shp')
okrug = st_read('C:/Users/barguzin/YandexDisk/mosmonitor/geo_data/RU-MOW/data/boundary-polygon.shp')
plot(st_geometry(okrug))
ao = okrug %>% filter(ADMIN_LVL==5)
# read prepped
prepped = st_read('D:/gits/church_data_prep/prepped_data.shp')
# read prepped
#prepped = st_read('D:/gits/church_data_prep/prepped_data.shp')
prepped = st_read('C:/Users/barguzin/Documents/Github/church_data_prep/prepped_data.shp')
# read all temples (from temples.ru)
geo = st_read("data/church_mos_temples_all.geojson")
print(geo$prog_200 %>% sum()) # make sure all of the 200 program is there!
jj <- left_join(geo, st_drop_geometry(prepped), by=c("temples_id"="church_id"), keep=TRUE)
#################################################
#-----------------------------------------------#
#                     EDA                       #
#-----------------------------------------------#
#################################################
# plot building types versus active (functioning)
ggplot(jj) +
geom_bar(aes(x=type_build, fill=status)) +
#scale_fill_brewer(palette = "Purples") +
theme_bw() +
labs(title="Building types versus status", x="Type of Building", y="Count")
ggsave('imgs/build_type.png', dpi=150)
# plot cumulative sum of churches built in Moscow in 1990-2020
jj %>%
st_drop_geometry() %>%
filter(as.numeric(founded2) > 1990) %>%
count(founded2) %>%
mutate(csum = cumsum(n)) %>%
mutate(founded2 = as.numeric(founded2)) %>%
ggplot(aes(x=founded2, y=csum)) +
#geom_line(group=1, color='tomato', size=2) +
geom_col(group=1, fill='seagreen4') +
theme_bw() +
labs(x='year', y='total churches built', title='Number of churches constructed')
ggsave('imgs/cumsum.png', dpi=150)
# plot churches in UVAO
uvao = ao%>%filter(OSM_ID==-1278703)
# split geometry
split = st_cast(uvao,"POLYGON")
uvao = split[1,]
uvao_jj = st_filter(jj, uvao)
# convert prog_200 to binary
uvao_jj$prog_200 = as_factor(uvao_jj$prog_200)
# only keep active
uvao_jj = uvao_jj %>% filter(status!="non_preserve")
ggplot(uvao_jj) + geom_bar(aes(x=type_build))
# plot geographic map with locations in UVAO
ggplot() +
geom_sf(data=uvao) +
geom_sf(data=uvao_jj, aes(color=prog_200), size=2) +
#scale_colour_manual(name = "Species Names", values = myColors)
scale_color_manual(labels = c('not in program', 'in program'), values = c("0" = "blue","1"="red")) +
labs(color='Program 200') + theme_bw()
# same in leaflet
pal <- colorFactor(c("navy", "red"), domain = c(0, 1))
leaflet(uvao_jj) %>%
addTiles() %>%
addCircleMarkers(
label = ~church_id,
radius = 5,
color=~pal(prog_200),
stroke=FALSE,
fillOpacity = .5
)
# only keep where name does not have 'дерев' - those are temporary wooden buildings
uvao_jj %>% str_detect(name, 'дерев')
# only keep where name does not have 'дерев' - those are temporary wooden buildings
uvao_jj %>% str_detect(Name, 'дерев')
# only keep where name does not have 'дерев' - those are temporary wooden buildings
uvao_jj %>% filter(str_detect(Name, 'дерев'))
# only keep where name does not have 'дерев' - those are temporary wooden buildings
uvao_jj %>% filter(str_detect(Name, 'дерев')) %>% n()
# only keep where name does not have 'дерев' - those are temporary wooden buildings
uvao_jj %>% filter(str_detect(Name, 'дерев')) %>% dim
# only keep where name does not have 'дерев' - those are temporary wooden buildings
uvao_jj %>% filter(!str_detect(Name, 'дерев')) %>% dim
# only keep where name does not have 'дерев' - those are temporary wooden buildings
uvao_jj = uvao_jj %>% filter(!str_detect(Name, 'дерев'))
# save to file
st_write(uvao_jj, 'data/uvao_churches.geojson', delete_dsn = T)
st_write(uvao, 'data/uvao_adm.geojson', delete_dsn = T)
# read building centroids and subset by UVAO
centr = st_read('C:/Users/barguzin/YandexDisk/mosmonitor/geo_data/unom_mos_centr.shp')
uvao_centr = st_filter(centr, uvao)
st_write(uvao_centr, 'data/uvao_centr.geojson', delete_dsn = T)
# read building centroids and subset by UVAO
centr = st_read('C:/Users/barguzin/YandexDisk/mosmonitor/geo_data/unom_mos_centr.shp', encoding='UTF-8')
# read building centroids and subset by UVAO
centr = st_read('C:/Users/barguzin/YandexDisk/mosmonitor/geo_data/unom_mos_centr.shp', options = "ENCODING=WINDOWS-1252")
# read building centroids and subset by UVAO
centr = st_read('C:/Users/barguzin/YandexDisk/mosmonitor/geo_data/unom_mos_centr.shp', options = "ENCODING=UTF-8")
uvao_centr = st_filter(centr, uvao)
uvao_centr = uvao_centr %>% filter(!str_detect(Name, 'дерев'))
View(uvao_centr)
uvao_centr = uvao_centr %>% filter(clas='1:жилые')
uvao_centr = uvao_centr %>% filter(clas=='1:жилые')
View(prepped)
# only keep жилые (residential)
st_write(uvao_centr, 'data/uvao_centr.geojson', delete_dsn = T)
uvao_centr = st_read('data/uvao_centr.geojson')
uvao_jj = st_read('data/uvao_churches.geojson')
uvao = st_read('data/uvao_adm.geojson')
# prepare buffers around churches
uvao_jj_buff = uvao_jj %>%
st_transform(3857) %>%
mutate(buff_geom = st_buffer(geometry, 1000))
# make buff geometry main and drop old point geometry
st_geometry(uvao_jj_buff) <- "buff_geom"
uvao_jj_buff = uvao_jj_buff %>% select(-geometry)
uvao_jj_buff = uvao_jj_buff %>% st_transform(4326)
library(leaflet)
leaflet() %>%
addTiles() %>%
addPolygons(uvao_jj_buff)
View(uvao_jj_buff)
uvao_jj_buff = rename_geometry(uvao_jj_buff, 'geometry')
st_geometry(uvao_jj_buff) = "geometry"
leaflet() %>%
addTiles() %>%
addPolygons(uvao_jj_buff)
library(sf)
library(tidyverse)
library(leaflet)
uvao_centr = st_read('data/uvao_centr.geojson')
uvao_jj = st_read('data/uvao_churches.geojson')
uvao = st_read('data/uvao_adm.geojson')
# 25-30k people / church
# within 1km
# prepare buffers around churches
uvao_jj_buff = uvao_jj %>%
st_transform(3857) %>%
mutate(buff_geom = st_buffer(geometry, 1000))
# make buff geometry main and drop old point geometry
st_geometry(uvao_jj_buff) <- "buff_geom"
uvao_jj_buff = uvao_jj_buff %>% select(-geometry)
uvao_jj_buff = uvao_jj_buff %>% st_transform(4326)
st_geometry(uvao_jj_buff) = "geometry"
leaflet() %>%
addTiles() %>%
addPolygons(uvao_jj_buff)
# count covered demand for
# 1. all churches
# 2. churches in prog 200
# 3. churhces not in prog 200
plot(st_geometry(uvao_jj_buff))
leaflet() %>%
addTiles() %>%
addPolygons(uvao_jj_buff)
leaflet() %>%
addTiles() %>%
addPolygons(data=uvao_jj_buff)
# total uncovered demand
uvao_centr %>%
summarise_at(flat_cnt, sum)
# total uncovered demand
uvao_centr %>%
summarise_at('flat_cnt', sum)
# total uncovered demand
cat(rowsum(uvao_centr$flat_cnt))
# total uncovered demand
cat(sum(uvao_centr$flat_cnt))
# total uncovered demand
uvao_centr %>% select(flata_cnt) %>% summarise(sum)
# total uncovered demand
uvao_centr %>% select(flat_cnt) %>% summarise(sum)
# total uncovered demand
uvao_centr %>% select(flat_cnt) %>% summarise(sum(flat_cnt))
# total uncovered demand
sum(uvao_centr$flat_cnt)
# total uncovered demand
sum(uvao_centr$flat_cnt, na.rm=T)
#
st_filter(uvao_centr, uvao_jj_buff)
uvao_centr %>%
st_filter(uvao_jj_buff)
uvao_centr %>%
st_filter(uvao_jj_buff) %>%
mutate(sum_demand = sum(flat_cnt))
uvao_centr %>%
st_filter(uvao_jj_buff) %>%
mutate(sum_demand = rowSums(flat_cnt))
uvao_centr %>%
st_filter(uvao_jj_buff) %>%
mutate(sum_demand = sum(flat_cnt))
uvao_centr %>%
st_filter(uvao_jj_buff) %>%
summarise(sum_demand = sum(flat_cnt))
uvao_centr %>%
st_filter(uvao_jj_buff) %>%
st_drop_geometry() %>%
summarise(sum_demand = sum(flat_cnt))
uvao_centr %>%
st_filter(uvao_jj_buff) %>%
st_drop_geometry() %>%
summarise_all(sum = rowSums(.))
uvao_centr %>%
st_filter(uvao_jj_buff) %>%
st_drop_geometry() %>%
select(flat_cnt) %>%
summarise_all(sum = rowSums(.))
uvao_centr %>%
st_filter(uvao_jj_buff) %>%
st_drop_geometry() %>%
select(flat_cnt) %>%
summarise_all(sum)
uvao_centr %>%
st_filter(uvao_jj_buff) %>%
st_drop_geometry() %>%
select(flat_cnt) %>%
summarise_all(sum, na.rm=T)
# generate sampling grid
plot(st_make_grid(uvao, what='centers'))
# generate sampling grid
plot(st_make_grid(uvao, what='centers'), n=100)
# generate sampling grid
plot(st_make_grid(uvao, what='centers', n=100))
# generate sampling grid
grid = st_make_grid(uvao, what='centers', n=100)
leaflet() %>%
addTiles() %>%
addCircleMarkers(data=grid)
leaflet() %>%
addTiles() %>%
addCircleMarkers(
data=grid,
radius = 5,
stroke=FALSE,
fillOpacity = .5)
leaflet() %>%
addTiles() %>%
addCircleMarkers(
data=grid,
radius = 1,
stroke=FALSE,
fillOpacity = .5)
# generate sampling grid
grid = st_make_grid(uvao, what='centers', n=50)
leaflet() %>%
addTiles() %>%
addCircleMarkers(
data=grid,
radius = 1,
stroke=FALSE,
fillOpacity = .5)
# generate sampling grid
grid = st_make_grid(uvao, what='centers', n=50, square=F) %>%
st_filter(uvao)
# generate sampling grid
grid = st_make_grid(uvao, what='centers', n=50, square=F) %>%
st_as_sf() %>%
st_filter(uvao)
leaflet() %>%
addTiles() %>%
addCircleMarkers(
data=grid,
radius = 1,
stroke=FALSE,
fillOpacity = .5)
st_write(grid, 'data/grid_all.geojson', delete_dsn = T)
# cut out covered demand from
st_difference(uvao, st_union(uvao_jj_buff))
plot(st_difference(uvao, st_union(uvao_jj_buff)))
# get rid of dangling geometries
split = st_cast(inter_for_sites,"POLYGON")
# cut out covered demand from
inter_for_sites = st_difference(uvao, st_union(uvao_jj_buff))
# get rid of dangling geometries
split = st_cast(inter_for_sites,"POLYGON")
plot(split)
plot(split[1])
plot(split[2])
# get rid of dangling geometries
split = st_cast(inter_for_sites,"POLYGON")
plot(split[2,])
plot(split[1,])
plot(split[3,])
plot(split[4,])
uvao_for_sites = split[4,]
grid_for_sites = st_filter(grid, uvao_for_sites)
st_write(grid_for_sites, 'data/grid_for_sites.geojson', delete_dsn=T)
View(grid_for_sites)
grid_for_sites = grid_for_sites %>% rowid_to_column("geo_id")
st_write(grid_for_sites, 'data/grid_for_sites.geojson', delete_dsn=T)
leaflet() %>%
addTiles() %>%
addCircleMarkers(
data=grid_for_sites,
radius = 1,
stroke=FALSE,
fillOpacity = .5)
View(uvao_jj_buff)
# cut out covered demand from
inter_for_sites = st_difference(uvao, st_union(uvao_jj_buff %>% filter(prog_200!=1)))
# get rid of dangling geometries
split = st_cast(inter_for_sites,"POLYGON")
uvao_for_sites = split[4,]
grid_for_sites = st_filter(grid, uvao_for_sites)
grid_for_sites = grid_for_sites %>% rowid_to_column("geo_id")
st_write(grid_for_sites, 'data/grid_for_sites.geojson', delete_dsn=T)
leaflet() %>%
addTiles() %>%
addCircleMarkers(
data=grid_for_sites,
radius = 1,
stroke=FALSE,
fillOpacity = .5)
leaflet() %>%
addTiles() %>%
addCircleMarkers(
data=grid_for_sites,
radius = 1,
stroke=FALSE,
fillOpacity = .5) %>%
addMarkers(data=uvao_jj %>% filter(prog_200==1))
uvao_centr %>%
st_filter(uvao_jj_buff %>% filter(prog_200==0)) %>%
st_drop_geometry() %>%
select(flat_cnt) %>%
summarise_all(sum, na.rm=T)
# distance between centr and grid
dist = st_distance(uvao_centr, grid_for_sites)
st_crs(uvao)
st_crs(uvao_centr)
st_crs(uvao_jj)
write_csv(dist, 'data/dist.csv')
write.table(dist, 'data/dist.csv')
write.table(dist, file='data/dist.csv', row.names=FALSE, col.names=FALSE)
write.table(dist, file='data/dist.txt', row.names=FALSE, col.names=FALSE)
# also save binary table with 1km buffer
dist[dist>1000,]
library(units)
# also save as pairwise distance
pairwise_dist = st_distance(uvao_centr, grid_for_sites, by_element = T)
# also save as pairwise distance
dist = drop_units(dist)
dist[dist>1000,]
View(dist)
# also save binary table with 1km buffer
dist[1,1]
# also save binary table with 1km buffer
dist[dist<1000,1]
# also save binary table with 1km buffer
dist[dist<1000]
# also save binary table with 1km buffer
dim(dist[dist<1000])
dim(dist)
typeof(dist[dist<1000])
which(dist<1000)
typeof(which(dist<1000))
x = which(dist<1000)
x = dist[which(dist<1000)]
class(dist)
dim(dist)
dim[,1]
dist[,1]
# also save binary table with 1km buffer
dim(dist[dist<1000])
# also save binary table with 1km buffer
dist<1000
# also save binary table with 1km buffer
dim(dist<1000)
# also save binary table with 1km buffer
typeof(dist<1000)
# also save binary table with 1km buffer
as.integer(dist<1000)
# also save binary table with 1km buffer
binar = as.integer(dist<=1000)
dim(binar)
# also save binary table with 1km buffer
binar = as.matrix(dist<=1000)
# also save binary table with 1km buffer
binar = as.matrix(as.integer(dist<=1000))
dim(binar)
# also save binary table with 1km buffer
binar = ifelse(dist<=1000, 1, 0)
# also save binary table with 1km buffer
binar = ifelse(dist<=1000, 1, 0)
dim(binar)
write.table(binar, file='data/dist.txt', row.names=FALSE, col.names=FALSE)
write.table(binar, file='binar/dist.txt', row.names=FALSE, col.names=FALSE)
write.table(binar, file='data/binar.txt', row.names=FALSE, col.names=FALSE)
write.table(dist, file='data/dist.txt', row.names=FALSE, col.names=FALSE)
dist = st_distance(uvao_centr, grid_for_sites)
write.table(dist, file='data/dist.txt', row.names=FALSE, col.names=FALSE)
# also save as pairwise distance
dist = drop_units(dist)
# also save binary table with 1km buffer
binar = ifelse(dist<=1000, 1, 0)
write.table(binar, file='data/binar.txt', row.names=FALSE, col.names=FALSE)
View(uvao_centr)
uvao_centr = st_read('data/uvao_centr.geojson')
uvao_centr %>%
st_drop_geometry() %>%
rowid_to_column("geo_id") %>%
select(geo_id, flat_count, -index) %>%
write_csv('demand.csv')
uvao_centr %>%
st_drop_geometry() %>%
rowid_to_column("geo_id") %>%
select(geo_id, flat_cnt, -index) %>%
write_csv('demand.csv')
# facilities points
grid_for_sites %>%
st_drop_geometry() %>%
select(-geo_id) %>%
rowid_to_column("geo_id") %>%
write_csv('facility.csv')
# demand points
uvao_centr %>%
st_drop_geometry() %>%
rowid_to_column("geo_id") %>%
select(geo_id, flat_cnt, -index) %>%
write_csv('data/demand.csv')
# facilities points
grid_for_sites %>%
st_drop_geometry() %>%
select(-geo_id) %>%
rowid_to_column("geo_id") %>%
write_csv('data/facility.csv')
write.table(dist, file='data/dist.txt', row.names=FALSE, col.names=FALSE)
floor(5.5)
floor(5.6)
rounds(5.6, 0)
round(5.6, 0)
# the matrix is too large, make it smaller by roudning to ones before writing
y = function(x) round(x,0)
dist[] <- vapply(dist, y, numeric(1))
write.table(dist, file='data/dist.txt', row.names=FALSE, col.names=FALSE)
###########################################
#-----------------------------------------#
#           prep data for Python          #
#-----------------------------------------#
###########################################
# demand points
uvao_centr %>%
st_drop_geometry() %>%
rowid_to_column("geo_id") %>%
mutate(geo_id = geo_id - 1) %>%
select(geo_id, flat_cnt, -index) %>%
write_csv('data/demand.csv')
# facilities points
grid_for_sites %>%
st_drop_geometry() %>%
select(-geo_id) %>%
rowid_to_column("geo_id") %>%
mutate(geo_id = geo_id - 1) %>%
write_csv('data/facility.csv')
uvao_jj %>% filter(prog_200==1)
dist = st_distance(grid_for_sites, uvao_centr)
# the matrix is too large, make it smaller by roudning to ones before writing
y = function(x) round(x,0)
dist[] <- vapply(dist, y, numeric(1))
write.table(dist, file='data/dist.txt', row.names=FALSE, col.names=FALSE)
# also save as pairwise distance
dist = drop_units(dist)
# also save binary table with 1km buffer
binar = ifelse(dist<=1000, 1, 0)
write.table(binar, file='data/binar.txt', row.names=FALSE, col.names=FALSE)
